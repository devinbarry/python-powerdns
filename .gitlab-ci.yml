stages:
  - test
  - build
  - sync

test_python_powerdns:
  stage: test
  image: python:3.11
  tags:
    - python
  only:
    - branches
    - tags
  before_script:
    - python --version
    - pip --version
  script:
    - pip install --upgrade pip
    - pip install -r requirements_test.txt
    # Install python-powerdns in editable mode
    - pip install -e .
    # Discover all tests inside the test folder
    - coverage run -m unittest discover



build_and_publish:
  image: python:3.11
  stage: build
  tags:
    - python
  rules:
    # Build on master branch and tags
    - if: '$CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG'
      when: on_success
      exists:
        - powerdns/__init__.py
  before_script:
    - apt-get update && apt-get install -y jq
    # Get the project version from PyPI
    - export PYPI_PROJECT_VERSION=$(curl $UNOBTAIN_INDEX_URL/python-powerdns/json | jq -r '.info.version')
    - echo "PyPI project version - $PYPI_PROJECT_VERSION"
    # Get the project version from the project source code
    - export PROJECT_VERSION=$(grep "__version__" powerdns/__init__.py | awk -F "[\"']" '{print $2}')
    - echo "Project version - $PROJECT_VERSION"
    - |
      if [ -z "${PROJECT_VERSION}" ]; then
        echo "ERROR: PROJECT_VERSION is empty"
        exit 1
      fi
    # We should build the project if the source version is different from the PyPI project version
    - export SHOULD_BUILD=$([ "$PYPI_PROJECT_VERSION" == "$PROJECT_VERSION" ] && echo "false" || echo "true")
    - echo "Should build - $SHOULD_BUILD"
  script:
    # Don't build if the project version is the same as the PyPI project version
    - |
      if [ "$SHOULD_BUILD" != "true" ]; then
        echo "Skipping build as SHOULD_BUILD is not true"
        exit 0
      fi
    - |
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        echo "Building on tag - $CI_COMMIT_TAG"
        # Check that the project version matches the commit tag
        if [ "$CI_COMMIT_TAG" != "v$PROJECT_VERSION" ]; then exit 1; fi
      else
        echo "Building on branch - $CI_COMMIT_REF_NAME"
      fi
    - pip install hatch
    - hatch build
    - hatch publish --repo $PYPI_REPO_URL --user $PYPI_REPO_USER --auth $PYPI_REPO_AUTH


# Push a public copy of this repo up to GitHub
sync_public_repo:
  stage: sync
  image: alpine:latest
  before_script:
    - apk add --no-cache git openssh-client
    - eval $(ssh-agent -s)
    - echo "$GITHUB_SSH_PUSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "devinbarry@users.noreply.github.com"
    - git config --global user.name "Devin Barry"
  script:
    - git clone --single-branch --branch master $CI_REPOSITORY_URL private_repo
    - cd private_repo
    - git remote add public $GITHUB_PYTHON_POWERDNS_REPO_URL
    - git fetch public
    - git checkout -b temp_branch master
    - |
      git filter-branch --prune-empty --tree-filter '
        echo "DEBUG: Current directory contents:"
        ls -la
        echo "DEBUG: .gitattributes content:"
        cat .gitattributes
        if [ -e .gitattributes ]; then
          while IFS= read -r line || [[ -n "$line" ]]; do
            echo "DEBUG: Processing line: $line"
            if [[ $line == *"export-ignore"* ]]; then
              file=$(echo "$line" | cut -d" " -f1)
              echo "DEBUG: Attempting to remove: $file"
              rm -rf "$file"
              echo "DEBUG: Remove result: $?"
            fi
          done < .gitattributes
        else
          echo "DEBUG: .gitattributes file not found"
        fi
        echo "DEBUG: Directory contents after processing:"
        ls -la
      ' --tag-name-filter cat -- temp_branch
    - git push -f public temp_branch:master
  only:
    - master
